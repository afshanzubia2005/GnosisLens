version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: gnosislens-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: gnosislens
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./backend/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - gnosislens-network

  # Backend API
  backend:
    image: afshanakmal/gnosis_lens-backend:latest
    container_name: gnosislens-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 8000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/gnosislens?authSource=admin
      SESSION_SECRET: your-super-secret-session-key-change-this-in-production
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      FRONTEND_URL: http://localhost:3000
    ports:
      - "8000:8000"
    depends_on:
      - mongodb
    networks:
      - gnosislens-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Next.js App
  frontend:
    image: afshanakmal/gnosis_lens-frontend:latest
    container_name: gnosislens-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - gnosislens-network

volumes:
  mongodb_data:
    driver: local

networks:
  gnosislens-network:
    driver: bridge

